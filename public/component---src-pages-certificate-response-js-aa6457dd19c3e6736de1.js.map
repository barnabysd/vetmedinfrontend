{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/certificateResponse.js"],"names":["Layout","size","setSize","children","useState","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","layoutStyle","backgroundColor","theme","palette","background","lightBlue","minWidth","height","minHeight","border","overflow","style","StyledTypography","styled","Typography","gridStyle","ResponseForm","React","state","handleSubmit","e","a","console","log","JSON","stringify","preventDefault","fetch","method","headers","body","val","container","spacing","justify","item","xs","sm","onSubmit","type","name","value","email","CertificateResponse","render","resources","get","this","width","variant","headerText","bodyText","Component","pageQuery"],"mappings":"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","file":"component---src-pages-certificate-response-js-aa6457dd19c3e6736de1.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport theme from \"../theme\"\n\nfunction useWindowSize() {\n  const [size, setSize] = useState([0, 0])\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight])\n    }\n    window.addEventListener('resize', updateSize)\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n  return size\n}\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children }) => {\n  const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const layoutStyle = { backgroundColor:theme.palette.background.lightBlue, minWidth:'100%',height:'100vh',minHeight:'100vh',border: '0px solid yellow',overflow:'hidden'}\n\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div style={layoutStyle}>\n\n        <main>{children}</main>\n        {/* <footer>\n          Â© {new Date().getFullYear()}, \n          {` `}\n          <p>test</p>\n        </footer> */}\n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport get from 'lodash/get'\nimport Layout from '../components/layout'\nimport { Link } from \"gatsby\"\nimport { graphql } from 'gatsby' \nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport { ThemeProvider, Typography } from '@material-ui/core';\nimport theme from '../theme'\nimport styled from 'styled-components'\nimport SlideDrawer from '../components/SideDrawer'\nimport Grid from '@material-ui/core/Grid'\n\n// const StyledButton = styled(Button)`\n//   background-color: #6772e5;\n//   &:hover {\n//     background-color: #5469d4;\n//   }\n// `;\n\nconst StyledTypography = styled(Typography)`\n    margin-bottom: 3rem;\n`;\n\nconst gridStyle = {border: '0px solid red'}\n\nfunction ResponseForm() {\n    const [state, setState] = React.useState({})\n\n  const handleSubmit = async (e) => {\n      console.log(JSON.stringify(state))\n        e.preventDefault()\n        const val = await fetch('https://api.formik.com/submit/collect-score/scorecollector', {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(state),\n        })\n        console.log(val)\n  }\n\n    return (\n\n        <Grid container  \n                  spacing={0} \n                  spacing={0} \n                  justify=\"flex-start\" \n                  style={gridStyle}>\n                \n            <Grid item xs={12} sm={4}  style={gridStyle}>\n                <form onSubmit={handleSubmit}>\n                    \n                    <input type=\"hidden\" name=\"name\"  value={state.name} />\n                \n                   \n                    <input type=\"hidden\" name=\"email\" value={state.email} />\n                \n                    <button type=\"submit\">Resend </button>\n                </form>\n            </Grid>\n\n        </Grid>\n   \n    );\n  \n}\n\nclass CertificateResponse extends React.Component {\n  render() {\n    const resourcesAr = get(this, 'props.data.allCertificateResponseJson.nodes')\n    const resources = resourcesAr[0]\n    console.log(resources)\n    //console.log(resources.allResourcesJson)\n\n    return (\n        <Layout>\n          \n          <SlideDrawer />\n\n          <Grid container  \n              spacing={0} \n              spacing={0} \n              justify=\"flex-start\" \n              style={gridStyle}>\n              <Grid item xs={12} sm={12} style={gridStyle}>\n                 <div style={{height: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                 <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={8} style={gridStyle}>\n                  <ThemeProvider theme={theme}>\n                        <StyledTypography variant=\"h1\">{resources.headerText}</StyledTypography>\n                        <StyledTypography variant=\"body1\">{resources.bodyText}</StyledTypography>\n                   </ThemeProvider>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                 <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                  <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={8}  style={gridStyle}>\n\n                 <ResponseForm />\n\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                  <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={12}  style={gridStyle}>\n                  <div style={{height: '100px'}}></div>\n              </Grid>\n          </Grid>\n        </Layout>\n    )\n  }\n}\n\nexport default CertificateResponse\n\nexport const pageQuery = graphql`{\n  allCertificateResponseJson {\n    nodes {\n        headerText\n        bodyText\n    }\n  }\n}`"],"sourceRoot":""}