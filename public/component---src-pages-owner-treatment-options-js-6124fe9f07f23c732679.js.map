{"version":3,"sources":["webpack:///./src/pages/owner-treatment-options.js"],"names":["OwnerTreatmentOptions","data","console","log","useCookies","cookieKeyNames","DOG_CHOICE","CASESTUDYS_ALL","cookies","setCookie","initialState","step","ownerResponseSteps","SECTION_INTRO","useState","state","setState","resources","dogChoice","dogName","DUDLEY","resourcesAr","get","resourcesIntroAr","resourcesOwnerQuestionAr","id","setCurrentStep","useEffect","CORRECT_ANSWER","newCaseStudyProgress","setCaseStudyProgress","tasks","REASSURING_OWNER","getSlideData","QUESTION_POSED_BY_OWNER","QUESTION_POSED","ownerTreatment_CorrectAnswer","INCORRECT_ANSWER","ownerTreatment_InCorrectAnswer","style","display","e","pageQuery"],"mappings":"wSA0FeA,UA7Ee,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACxBC,QAAQC,IAAIF,GADsB,MAESG,YAAW,CAACC,IAAeC,WAAWD,IAAeE,iBAAzFC,EAF2B,KAElBC,EAFkB,KAG9BC,GAH8B,KAGf,CACfC,KAAMC,IAAmBC,gBAJK,EAORC,mBAASJ,GAA5BK,EAP2B,KAOpBC,EAPoB,KAQlCd,QAAQC,IAAI,oBAAoBY,EAAMJ,MACtCT,QAAQC,IAAI,QAASY,GACrB,IACIE,EADEC,EAAYV,EAAO,UAAgBA,EAAO,UAAeW,IAAQC,OAEjEC,EAAcC,IAAIrB,EAAM,yBACxBsB,EAAmBD,IAAIrB,EAAM,oCAC7BuB,EAA2BF,IAAIrB,EAAM,8BAErCwB,EAAK,oBAGLC,EAAiB,SAACf,GACpBT,QAAQC,IAAI,oCAAoCQ,GAEhDK,EAAS,OAAD,wBAAKD,GAAL,IAAYJ,KAAMA,MAkB9B,OATAgB,qBAAU,WACR,GAAIZ,EAAMJ,OAASC,IAAmBgB,eAAgB,CACpD,IAAMC,EAAuBC,YAAqBC,IAAMC,iBAAiBd,EAAUV,GACnFN,QAAQC,IAAI,iBAAmB0B,EAAuB,kBACtDpB,EAAUJ,IAAeE,eAAesB,GAAqB,EAAK,QAEpE,CAACd,EAAMJ,OAGDI,EAAMJ,MACZ,KAAKC,IAAmBC,cACtBI,EAAYgB,YAAaV,EAAiB,+CAC1C,MACF,KAAKX,IAAmBsB,wBACpBjB,EAAYgB,YAAaT,EAAyB,+BACpD,MACF,KAAKZ,IAAmBuB,eACpBlB,EAAYgB,YAAaZ,EAAY,2BACvC,MACA,KAAKT,IAAmBgB,eAGtBX,EAAYmB,IACd,MACA,KAAKxB,IAAmByB,iBAEtBpB,EAAYqB,IACd,MACF,QACE,MAAO,mBAIX,OADApC,QAAQC,IAAIc,GACPA,EAGL,YAAC,IAAD,KACQF,EAAMJ,OAASC,IAAmBC,cAAgB,YAAC,IAAD,CAAiBF,KAAMC,IAAmBC,cAAeY,GAAIA,EAAIc,MAAO,CAACC,QAAS,QAAStB,UAAWA,EAAWQ,eAAgBA,EAAgBT,UAAWA,IAAgB,GAC9NF,EAAMJ,OAASC,IAAmBsB,wBAA0B,YAAC,IAAD,CAAiBvB,KAAMC,IAAmBsB,wBAAyBT,GAAIA,EAAIc,MAAO,CAACC,QAAS,QAAStB,UAAWA,EAAWQ,eAAgBA,EAAgBT,UAAWA,IAAgB,GAClPF,EAAMJ,OAASC,IAAmBuB,eAAiB,YAAC,IAAD,CAAiBxB,KAAMC,IAAmBuB,eAAgBV,GAAIA,EAAIc,MAAO,CAACC,QAAS,QAAStB,UAAWA,EAAWQ,eAAgBA,EAAiBT,UAAWA,IAAgB,GACjOF,EAAMJ,OAASC,IAAmBgB,eAAiB,YAAC,IAAD,CAAiBjB,KAAMC,IAAmBgB,eAAgBH,GAAIA,EAAIc,MAAO,CAACC,QAAS,QAAStB,UAAWA,EAAWQ,eAAgBA,EAAgBT,UAAWA,IAAgB,GAChOF,EAAMJ,OAASC,IAAmByB,iBAAmB,YAAC,IAAD,CAAiB1B,KAAMC,IAAmByB,iBAAkBZ,GAAIA,EAAIc,MAAO,CAACC,QAAS,QAAStB,UAAWA,EAAWQ,eA/ChK,SAACe,GACdf,EAAed,IAAmBuB,iBA8CqKlB,UAAWA,IAAgB,IAR/M,uBAexB,IAAMyB,EAAS","file":"component---src-pages-owner-treatment-options-js-6124fe9f07f23c732679.js","sourcesContent":["import React, { useRef,useState, useEffect, createRef } from \"react\"\nimport get from \"lodash/get\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport theme, { sm, md, lg, xl } from \"../theme\"\nimport { dogName, ownerName, ownerResponseSteps, cookieKeyNames, tasks } from \"../WebsiteConstants\"\nimport { processInternalLink, stripUneededHtml, removeParagraphsTags, getSlideData } from '../utils/displayUtils'\nimport { useCookies } from 'react-cookie'\nimport QuestionResPage from '../components/OwnerResPage'\nimport Layout from '../components/layout'\nimport slides, {ownerTreatment_CorrectAnswer,ownerTreatment_InCorrectAnswer} from \"../api/slideData\"\nimport { setCaseStudyProgress } from \"../utils/dataUtils\"\n\nconst OwnerTreatmentOptions = ({data}) => {\n        console.log(data)\n        const [cookies, setCookie, removeCookie] = useCookies([cookieKeyNames.DOG_CHOICE,cookieKeyNames.CASESTUDYS_ALL])\n        let initialState = { \n            step: ownerResponseSteps.SECTION_INTRO, \n        }\n    \n        const [state, setState] = useState(initialState)\n        console.log(\"=========== step \",state.step)\n        console.log(\"state\", state)\n        const dogChoice = cookies[\"dogChoice\"] ? cookies[\"dogChoice\"]: dogName.DUDLEY \n        let resources\n        const resourcesAr = get(data, 'allNodeQuestion.nodes')\n        const resourcesIntroAr = get(data, 'allNodeSectionintroduction.nodes')\n        const resourcesOwnerQuestionAr = get(data, 'allNodeOwnerquestion.nodes')\n        \n        const id = \"ownerResponsePage\"\n        const style = {}\n\n        const setCurrentStep = (step) => {   \n            console.log(\"=========== setCurrentStep - step\",step)\n            // console.log(\"state\", state)\n            setState({...state, step: step})\n        }\n\n        const tryAgain = (e) => {\n            setCurrentStep(ownerResponseSteps.QUESTION_POSED)\n        }\n\n        // =================== CHECK COMPLETION STATUS ==================\n\n        useEffect(() => {\n          if (state.step === ownerResponseSteps.CORRECT_ANSWER) { \n            const newCaseStudyProgress = setCaseStudyProgress(tasks.REASSURING_OWNER,dogChoice,cookies)\n            console.log(\"============= \" + newCaseStudyProgress + \" =============\")\n            setCookie(cookieKeyNames.CASESTUDYS_ALL,newCaseStudyProgress,true,\"/\")\n          } \n        },[state.step])\n    \n        // TODO - make this logical question posed by user is from treatment-options-section-introduction\n        switch (state.step) {\n          case ownerResponseSteps.SECTION_INTRO:\n            resources = getSlideData(resourcesIntroAr,\"treatment-options-section-main-introduction\")\n            break\n          case ownerResponseSteps.QUESTION_POSED_BY_OWNER:\n              resources = getSlideData(resourcesOwnerQuestionAr,\"owner-question-is-dudley-ok\")\n            break\n          case ownerResponseSteps.QUESTION_POSED:\n              resources = getSlideData(resourcesAr,\"owner-treatment-options\")\n            break\n            case ownerResponseSteps.CORRECT_ANSWER:\n                //TODO - dynamic\n              //resources = getSlideData(resourcesAr,\"/owner-treatment-answer-concise-language\")\n              resources = ownerTreatment_CorrectAnswer\n            break\n            case ownerResponseSteps.INCORRECT_ANSWER:\n              //resources = getSlideData(resourcesAr,\"/owner-treatment-answer-incorrect\")\n              resources = ownerTreatment_InCorrectAnswer\n            break\n          default:\n            return \"no current slide\"\n        }\n        \n        console.log(resources)\n        if (!resources) return \"resources not found\"\n        \n    return (\n        <Layout>\n              { state.step === ownerResponseSteps.SECTION_INTRO ? <QuestionResPage step={ownerResponseSteps.SECTION_INTRO} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.QUESTION_POSED_BY_OWNER ? <QuestionResPage step={ownerResponseSteps.QUESTION_POSED_BY_OWNER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.QUESTION_POSED ? <QuestionResPage step={ownerResponseSteps.QUESTION_POSED} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep } resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.CORRECT_ANSWER ? <QuestionResPage step={ownerResponseSteps.CORRECT_ANSWER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.INCORRECT_ANSWER ? <QuestionResPage step={ownerResponseSteps.INCORRECT_ANSWER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={tryAgain} resources={resources} /> : ''}\n        </Layout>\n    )\n}\n\nexport default OwnerTreatmentOptions\n\nexport const pageQuery = graphql`\n  {\n    allNodeQuestion {\n      nodes {\n        field_accessibilityvideotext\n        field_additionalbodytext {\n          processed\n        }\n        field_animationvideoname\n        field_backlink {\n          title\n          uri\n        }\n        field_buttonlinks {\n          title\n          uri\n        }\n        field_continuelink {\n          title\n          uri\n        }\n        field_dogchoice\n        field_instructionstext {\n          processed\n        }\n        field_optioniscorrect1\n        field_optioniscorrect2\n        field_optioniscorrect3\n        field_optionlink1 {\n          title\n          uri\n        }\n        field_optionsbodytext1 {\n          processed\n        }\n        field_optionsbodytext2 {\n          processed\n        }\n        field_optionsbodytext3 {\n          processed\n        }\n        field_optionsheader1\n        field_progresspercent\n        field_questiontext {\n          processed\n        }\n        path {\n          alias\n        }\n        drupal_id\n        changed(fromNow: false)\n      }\n    }\n    allNodeSectionintroduction {\n      nodes {\n        field_headertext\n        path {\n          alias\n        }\n      }\n    }\n    allNodeOwnerquestion {\n      nodes {\n        field_headertext\n        field_additionalbodytext {\n          processed\n        }\n        path {\n          alias\n        }\n      }\n    }\n  }\n  `\n\n"],"sourceRoot":""}