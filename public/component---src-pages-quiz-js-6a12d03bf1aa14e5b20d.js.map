{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/api/quizQuestions.js","webpack:///./src/components/Question.js","webpack:///./src/components/QuestionCount.js","webpack:///./src/components/AnswerOption.js","webpack:///./src/components/Quiz.js","webpack:///./src/components/Result.js","webpack:///./src/components/QuizApp.js","webpack:///./src/pages/quiz.js","webpack:///./node_modules/@material-ui/core/esm/colors/blue.js","webpack:///./src/components/seo.js"],"names":["Header","siteTitle","style","background","blue","marginBottom","defaultProps","Layout","children","minWidth","height","minHeight","border","overflow","quizQuestions","question","answers","type","content","Question","props","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","questionTotal","answerOptions","map","Result","quizResult","QuizApp","state","answersCount","result","handleAnswerSelected","bind","componentDidMount","shuffledAnswerOptions","shuffleArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","renderQuiz","renderResult","render","Component","title","to","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","property","author","concat"],"mappings":"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","file":"component---src-pages-quiz-js-6a12d03bf1aa14e5b20d.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { blue, purple } from '@material-ui/core/colors';\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: blue[600],\n      marginBottom: `1.45rem`,\n    }}\n  >\n    {/* <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div> */}\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <div style={{ minWidth:'100%',height:'100vh',minHeight:'100vh',border: '1px solid yellow',overflow:'hidden'}}>\n\n        <main>{children}</main>\n        {/* <footer>\n          Â© {new Date().getFullYear()}, \n          {` `}\n          <p>test</p>\n        </footer> */}\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","var quizQuestions = [\n  {\n      question: \"Which dog toy is best?\",\n      answers: [\n          {\n              type: \"Pug\",\n              content: \"Bone\"\n          },\n          {\n              type: \"Rottweiller\",\n              content: \"Squeaky Toy\"\n          },\n          {\n              type: \"Labrador\",\n              content: \"slipper\"\n          }\n      ]\n  },\n  {\n      question: \"Which dog trick is best?\",\n      answers: [\n          {\n              type: \"Pug\",\n              content: \"Roll over\"\n          },\n          {\n              type: \"Rottweiller\",\n              content: \"Sit\"\n          },\n          {\n              type: \"Labrador\",\n              content: \"Jump\"\n          }\n      ]\n  }\n  \n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from './Question';\nimport QuestionCount from './QuestionCount';\nimport AnswerOption from './AnswerOption';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from '../api/quizQuestions';\nimport Quiz from './Quiz';\nimport Result from './Result';\n// import logo from '../svg/logo.svg';\nimport '../QuizApp.css';\n\nclass QuizApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h2>Case Study - Quiz</h2>\n        </div>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default QuizApp;\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport QuizApp from \"../components/QuizApp\"\n\n\n\nconst Quiz = () => (\n    <Layout>\n        <SEO title=\"Quiz\" />\n        <QuizApp></QuizApp>\n        <Link to=\"/\">Back to home</Link>\n    </Layout>\n)\n\nexport default Quiz;\n","var blue = {\n  50: '#e3f2fd',\n  100: '#bbdefb',\n  200: '#90caf9',\n  300: '#64b5f6',\n  400: '#42a5f5',\n  500: '#2196f3',\n  600: '#1e88e5',\n  700: '#1976d2',\n  800: '#1565c0',\n  900: '#0d47a1',\n  A100: '#82b1ff',\n  A200: '#448aff',\n  A400: '#2979ff',\n  A700: '#2962ff'\n};\nexport default blue;","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}