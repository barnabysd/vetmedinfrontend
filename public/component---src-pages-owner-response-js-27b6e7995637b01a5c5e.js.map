{"version":3,"sources":["webpack:///./src/pages/owner-response.js"],"names":["OwnerResponse","data","console","log","useCookies","cookieKeyNames","DOG_CHOICE","CASESTUDYS_ALL","cookies","setCookie","initialState","step","ownerResponseSteps","QUESTION_POSED_BY_OWNER","useState","state","setState","resources","dogChoice","dogName","DUDLEY","resourcesAr","get","resourcesIntroAr","id","setCurrentStep","getSlideData","POPPY","REGGIE","QUESTION_POSED","CORRECT_ANSWER","ownerResponse_CorrectAnswer","INCORRECT_ANSWER","ownerResponse_InCorrectAnswer","useEffect","newCaseStudyProgress","setCaseStudyProgress","tasks","RESPONDING_OWNER_INITIAL_QUESTION","path","style","display","e","pageQuery"],"mappings":"qSAsFeA,UAzEO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAChBC,QAAQC,IAAIF,GADc,MAEiBG,YAAW,CAACC,IAAeC,WAAWD,IAAeE,iBAAzFC,EAFmB,KAEVC,EAFU,KAGtBC,GAHsB,KAGP,CACfC,KAAMC,IAAmBC,0BAJH,EAOAC,mBAASJ,GAA5BK,EAPmB,KAOZC,EAPY,KAQ1Bd,QAAQC,IAAI,oBAAoBY,EAAMJ,MACtCT,QAAQC,IAAI,QAASY,GACrB,IAEIE,EAFEC,EAAYV,EAAO,UAAgBA,EAAO,UAAeW,IAAQC,OAGjEC,EAAcC,IAAIrB,EAAM,yBACxBsB,EAAmBD,IAAIrB,EAAM,oCAE7BuB,EAAK,oBAELC,EAAiB,SAACd,GACpBT,QAAQC,IAAI,oCAAoCQ,GAEhDK,EAAS,OAAD,wBAAKD,GAAL,IAAYJ,KAAMA,MAO9B,OAAQI,EAAMJ,MACZ,KAAKC,IAAmBC,wBAChBK,IAAcC,IAAQC,SAAQH,EAAYS,YAAaL,EAAa,iDACpEH,IAAcC,IAAQQ,QAAOV,EAAYS,YAAaH,EAAkB,gDACxEL,IAAcC,IAAQS,SAAQX,EAAYS,YAAaL,EAAa,iDAC1E,MACA,KAAKT,IAAmBiB,eAClBX,IAAcC,IAAQS,SAAQX,EAAYS,YAAaL,EAAa,yCACpEH,IAAcC,IAAQQ,QAAOV,EAAYS,YAAaL,EAAa,uCACnEH,IAAcC,IAAQS,SAAQX,EAAYS,YAAaL,EAAa,4CAC1E,MACA,KAAKT,IAAmBkB,eAEtBb,EAAYc,IACd,MACA,KAAKnB,IAAmBoB,iBACtBf,EAAYgB,IACd,MACF,QACE,MAAO,mBAIX,OADA/B,QAAQC,IAAIc,GACPA,GAILiB,qBAAU,WACR,GAAInB,EAAMJ,OAASC,IAAmBkB,eAAgB,CACpD,IAAMK,EAAuBC,YAAqBC,IAAMC,kCAAkCpB,EAAUV,GACpGN,QAAQC,IAAI,iBAAmBgC,EAAuB,kBACtD1B,EAAUJ,IAAeE,eAAe4B,EAAqB,CAAEI,KAAM,SAEvE,CAACxB,EAAMJ,OAGT,kBAAC,IAAD,KACQI,EAAMJ,OAASC,IAAmBC,wBAA0B,kBAAC,IAAD,CAAiBF,KAAMC,IAAmBC,wBAAyBW,GAAIA,EAAIgB,MAAO,CAACC,QAAS,QAASvB,UAAWA,EAAWO,eAAgBA,EAAgBR,UAAWA,IAAgB,GAClPF,EAAMJ,OAASC,IAAmBiB,eAAiB,kBAAC,IAAD,CAAiBlB,KAAMC,IAAmBiB,eAAgBL,GAAIA,EAAIgB,MAAO,CAACC,QAAS,QAASvB,UAAWA,EAAWO,eAAgBA,EAAiBR,UAAWA,IAAgB,GACjOF,EAAMJ,OAASC,IAAmBkB,eAAiB,kBAAC,IAAD,CAAiBnB,KAAMC,IAAmBkB,eAAgBN,GAAIA,EAAIgB,MAAO,CAACC,QAAS,QAASvB,UAAWA,EAAWO,eAAgBA,EAAgBR,UAAWA,IAAgB,GAChOF,EAAMJ,OAASC,IAAmBoB,iBAAmB,kBAAC,IAAD,CAAiBrB,KAAMC,IAAmBoB,iBAAkBR,GAAIA,EAAIgB,MAAO,CAACC,QAAS,QAASvB,UAAWA,EAAWO,eA5ChK,SAACiB,GACdjB,EAAeb,IAAmBiB,iBA2CqKZ,UAAWA,IAAgB,KAjB/M,uBAwBxB,IAAM0B,EAAS","file":"component---src-pages-owner-response-js-27b6e7995637b01a5c5e.js","sourcesContent":["import React, { useRef,useState, useEffect, createRef } from \"react\"\nimport get from \"lodash/get\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport theme, { sm, md, lg, xl } from \"../theme\"\nimport { dogName, ownerName, ownerResponseSteps, cookieKeyNames, tasks } from \"../WebsiteConstants\"\nimport { useCookies } from 'react-cookie'\nimport QuestionResPage from '../components/OwnerResPage'\nimport Layout from '../components/layout'\nimport slides, {ownerResponse_CorrectAnswer,ownerResponse_InCorrectAnswer} from \"../api/slideData\"\nimport { getSlideData } from \"../utils/displayUtils\"\nimport { setCaseStudyProgress } from \"../utils/dataUtils\"\n\nconst OwnerResponse = ({data}) => {\n        console.log(data)\n        const [cookies, setCookie, removeCookie] = useCookies([cookieKeyNames.DOG_CHOICE,cookieKeyNames.CASESTUDYS_ALL])\n        let initialState = { \n            step: ownerResponseSteps.QUESTION_POSED_BY_OWNER, \n        }\n      \n        const [state, setState] = useState(initialState)\n        console.log(\"=========== step \",state.step)\n        console.log(\"state\", state)\n        const dogChoice = cookies[\"dogChoice\"] ? cookies[\"dogChoice\"]: dogName.DUDLEY \n\n        let resources\n        const resourcesAr = get(data, 'allNodeQuestion.nodes')\n        const resourcesIntroAr = get(data, 'allNodeSectionintroduction.nodes')\n        \n        const id = \"ownerResponsePage\"\n\n        const setCurrentStep = (step) => {   \n            console.log(\"=========== setCurrentStep - step\",step)\n            // console.log(\"state\", state)\n            setState({...state, step: step})\n        }\n\n        const tryAgain = (e) => {\n            setCurrentStep(ownerResponseSteps.QUESTION_POSED)\n        }\n        \n        switch (state.step) {\n          case ownerResponseSteps.QUESTION_POSED_BY_OWNER:\n              if (dogChoice === dogName.DUDLEY) resources = getSlideData(resourcesAr, \"/dudleys-owner-response-section-introduction\")\n              if (dogChoice === dogName.POPPY) resources = getSlideData(resourcesIntroAr, \"/poppys-owner-response-section-introduction\")\n              if (dogChoice === dogName.REGGIE) resources = getSlideData(resourcesAr, \"/reggies-owner-response-section-introduction\")\n            break\n            case ownerResponseSteps.QUESTION_POSED:\n              if (dogChoice === dogName.REGGIE) resources = getSlideData(resourcesAr, \"/how-will-you-respond-to-mrs-jenkins\")\n              if (dogChoice === dogName.POPPY) resources = getSlideData(resourcesAr, \"/how-will-you-respond-to-mr-oakley\")\n              if (dogChoice === dogName.REGGIE) resources = getSlideData(resourcesAr, \"/how-will-you-respond-to-mrs-richardson\")\n            break\n            case ownerResponseSteps.CORRECT_ANSWER:\n              //TODO - dynamic\n              resources = ownerResponse_CorrectAnswer\n            break\n            case ownerResponseSteps.INCORRECT_ANSWER:\n              resources = ownerResponse_InCorrectAnswer\n            break\n          default:\n            return \"no current slide\"\n        }\n      \n        console.log(resources)\n        if (!resources) return \"resources not found\"\n\n        // ================ set completed if is\n        \n        useEffect(() => {\n          if (state.step === ownerResponseSteps.CORRECT_ANSWER) {  \n            const newCaseStudyProgress = setCaseStudyProgress(tasks.RESPONDING_OWNER_INITIAL_QUESTION,dogChoice,cookies)\n            console.log(\"============= \" + newCaseStudyProgress + \" =============\")\n            setCookie(cookieKeyNames.CASESTUDYS_ALL,newCaseStudyProgress,{ path: '/' })  \n          }\n        },[state.step])\n        \n    return (\n        <Layout>\n              { state.step === ownerResponseSteps.QUESTION_POSED_BY_OWNER ? <QuestionResPage step={ownerResponseSteps.QUESTION_POSED_BY_OWNER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.QUESTION_POSED ? <QuestionResPage step={ownerResponseSteps.QUESTION_POSED} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep } resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.CORRECT_ANSWER ? <QuestionResPage step={ownerResponseSteps.CORRECT_ANSWER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.INCORRECT_ANSWER ? <QuestionResPage step={ownerResponseSteps.INCORRECT_ANSWER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={tryAgain} resources={resources} /> : ''}\n        </Layout>\n    )\n}\n\nexport default OwnerResponse\n\nexport const pageQuery = graphql`\n  {\n    allNodeQuestion {\n      nodes {\n        field_accessibilityvideotext\n        field_additionalbodytext {\n          processed\n        }\n        field_animationvideoname\n        field_backlink {\n          title\n          uri\n        }\n        field_buttonlinks {\n          title\n          uri\n        }\n        field_continuelink {\n          title\n          uri\n        }\n        field_dogchoice\n        field_instructionstext {\n          processed\n        }\n        field_optioniscorrect1\n        field_optionlink1 {\n          title\n          uri\n        }\n        field_optionsbodytext1 {\n          processed\n        }\n        field_optionsbodytext2 {\n          processed\n        }\n        field_optionsbodytext3 {\n          processed\n        }\n        field_optionsheader1\n        field_progresspercent\n        field_questiontext {\n          processed\n        }\n        path {\n          alias\n        }\n        drupal_id\n        changed(fromNow: false)\n      }\n    }\n    allNodeSectionintroduction {\n    nodes {\n      field_headertext\n      path {\n        alias\n      }\n    }\n  }\n\n  }\n  `\n\n"],"sourceRoot":""}