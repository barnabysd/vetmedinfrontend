{"version":3,"sources":["webpack:///./src/pages/certificate.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["contactDynamicFormik","React","useState","state","setState","handleChange","e","console","log","target","name","value","handleSubmit","a","JSON","stringify","preventDefault","fetch","method","headers","body","val","title","to","onSubmit","for","type","onChange","email","Layout","size","setSize","children","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","layoutStyle","backgroundColor","theme","palette","background","lightBlue","minWidth","height","minHeight","border","overflow","style","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"gXAmEeA,UA1Df,WAAkC,IAAD,EACHC,IAAMC,SAAS,IAAlCC,EADsB,KACfC,EADe,KAoBvBC,EAAe,SAACC,GAAO,IAAD,EACxBC,QAAQC,IAAI,OAAQF,EAAEG,OAAOC,MAC7BH,QAAQC,IAAI,OAAOF,EAAEG,OAAOE,OAC9BP,EAAS,OAAD,wBAAMD,GAAN,WAAcG,EAAEG,OAAOC,MAAOJ,EAAEG,OAAOE,MAAvC,MAGNC,EAAY,e,EAAA,G,EAAA,UAAG,WAAON,GAAP,eAAAO,EAAA,6DACjBN,QAAQC,IAAIM,KAAKC,UAAUZ,IACzBG,EAAEU,iBAFa,SAGGC,MAAM,6DAA8D,CACtFC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMN,KAAKC,UAAUZ,KARN,OAGTkB,EAHS,OAUfd,QAAQC,IAAIa,GAVG,0C,+KAAH,sDAahB,OACI,YAAC,IAAD,KACA,YAAC,IAAD,CAAKC,MAAM,UACV,iCACA,YAAC,OAAD,CAAMC,GAAG,KAAT,gBACH,oBAAMC,SAAUZ,GACd,qBAAOa,IAAI,QAAX,qBACA,qBAAOC,KAAK,OAAOhB,KAAK,OAAOC,MAAOR,EAAMO,KAAMiB,SAAUtB,IAE5D,qBAAOoB,IAAI,SAAX,sBACA,qBAAOC,KAAK,OAAOhB,KAAK,QAAQC,MAAOR,EAAMyB,MAAOD,SAAUtB,IAE9D,sBAAQqB,KAAK,UAAb,c,iICcOG,IAtCA,SAAC,GAAkB,IAlBT,EAChBC,EAAMC,EAiBGC,EAAe,EAAfA,SAAe,GAlBR,EACC9B,mBAAS,CAAC,EAAG,IAA9B4B,EADgB,KACVC,EADU,KAEvBE,2BAAgB,WACd,SAASC,IACPH,EAAQ,CAACI,OAAOC,WAAYD,OAAOE,cAIrC,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IACIJ,GAqBDU,GAbyB,UAGrB,OAUU,CAAEC,gBAAgBC,IAAMC,QAAQC,WAAWC,UAAWC,SAAS,OAAOC,OAAO,QAAQC,UAAU,QAAQC,OAAQ,mBAAmBC,SAAS,WAG/J,OACE,8BAEE,YAAC,IAAD,KACA,mBAAKC,MAAOX,GAEV,wBAAOR,Q,oVC9Cf,SAASoB,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMjC,EAAS,EAATA,MAC9BkC,EADuC,OACvCA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,YAAC,IAAD,CACEM,eAAgB,CACdL,QAEFhC,MAAOA,EACPsC,cAAa,QAAUJ,EAAKE,aAAapC,MACzCiC,KAAM,CACJ,CACE7C,KAAK,cACLmD,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASvC,GAEX,CACEwC,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEnD,KAAK,eACLmD,QAAQ,WAEV,CACEnD,KAAK,kBACLmD,QAASL,EAAKE,aAAaK,QAE7B,CACErD,KAAK,gBACLmD,QAASvC,GAEX,CACEZ,KAAK,sBACLmD,QAASJ,IAEXO,OAAOT,KAKfH,EAAIa,aAAe,CACjBX,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-certificate-js-7ff848afedf2f70e790f.js","sourcesContent":["// import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n\nimport React from 'react';\n\nfunction  contactDynamicFormik() {\n    const [state, setState] = React.useState({})\n\n\n    /*\n    https://github.com/gatsbyjs/gatsby/issues/10382\n    */\n\n    // validate={values => {\n    //     let errors = {};\n    //     if (!values.email) {\n    //       errors.email = 'Required';\n    //     } else if (\n    //       !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n    //     ) {\n    //       errors.email = 'Invalid email address';\n    //     }\n    //     return errors;\n    //   }}\n\n    const handleChange = (e) => {\n        console.log(\"etk \", e.target.name);\n        console.log(\"etv \",e.target.value);\n      setState({ ...state, [e.target.name]: e.target.value })\n    }\n\n  const handleSubmit = async (e) => {\n      console.log(JSON.stringify(state))\n        e.preventDefault()\n        const val = await fetch('https://api.formik.com/submit/collect-score/scorecollector', {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(state),\n        })\n        console.log(val)\n  }\n\n    return (\n        <Layout>\n        <SEO title=\"About\" />\n         <h1>Contact</h1>\n         <Link to=\"/\">Back to home</Link>\n      <form onSubmit={handleSubmit}>\n        <label for=\"name\">Enter your name: </label>\n        <input type=\"text\" name=\"name\" value={state.name} onChange={handleChange} />\n      \n        <label for=\"email\">Enter your email: </label>\n        <input type=\"text\" name=\"email\" value={state.email} onChange={handleChange} />\n      \n        <button type=\"submit\">Submit</button>\n      </form>\n      </Layout>\n    );\n  \n}\n\nexport default contactDynamicFormik;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport theme from \"../theme\"\n\nfunction useWindowSize() {\n  const [size, setSize] = useState([0, 0])\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight])\n    }\n    window.addEventListener('resize', updateSize)\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n  return size\n}\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children }) => {\n  const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const layoutStyle = { backgroundColor:theme.palette.background.lightBlue, minWidth:'100%',height:'100vh',minHeight:'100vh',border: '0px solid yellow',overflow:'hidden'}\n\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div style={layoutStyle}>\n\n        <main>{children}</main>\n        {/* <footer>\n          Â© {new Date().getFullYear()}, \n          {` `}\n          <p>test</p>\n        </footer> */}\n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}