{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/certificateResponse.js"],"names":["Layout","children","scrollablePage","backgroundColor","theme","palette","background","lightBlue","minWidth","className","StyledTypography","styled","Typography","gridStyle","border","ResponseForm","React","useState","state","handleSubmit","e","a","console","log","JSON","stringify","preventDefault","fetch","method","headers","body","val","container","spacing","justify","style","item","xs","sm","onSubmit","type","name","value","email","CertificateResponse","render","resources","get","this","height","width","variant","headerText","bodyText","Component","pageQuery"],"mappings":"2LAgGeA,IA3DA,SAAC,GAAgG,IAA9FC,EAA6F,EAA7FA,SAA6F,IAAnFC,sBAAmF,aAA3DC,uBAA2D,MAAzCC,IAAMC,QAAQC,WAAWC,UAAgB,EAGnG,OAsCV,OApBIL,GACa,CACTC,gBAAgBA,EAChBK,SAAS,QAkBf,8BAEE,YAAC,IAAD,KACA,mBAAKC,UAAU,iBAEb,wBAAOR,Q,qaCjEf,IAAMS,EAAmBC,kBAAOC,KAAV,wFAAGD,CAAH,yBAIhBE,EAAY,CAACC,OAAQ,iBAE3B,SAASC,IAAgB,IAAD,IACMC,IAAMC,SAAS,IAAlCC,EADa,KAGhBC,GAHgB,KAGJ,e,EAAA,G,EAAA,UAAG,WAAOC,GAAP,eAAAC,EAAA,6DACjBC,QAAQC,IAAIC,KAAKC,UAAUP,IACzBE,EAAEM,iBAFa,SAGGC,MAAM,6DAA8D,CACtFC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMN,KAAKC,UAAUP,KARN,OAGTa,EAHS,OAUfT,QAAQC,IAAIQ,GAVG,0C,+KAAH,uDAahB,OAEI,YAAC,MAAD,GAAMC,WAAS,EACLC,QAAS,IADnB,QAEmB,EAFnB,EAGUC,QAAQ,aAHlB,EAIUC,MAAOtB,EAJjB,GAMI,YAAC,IAAD,CAAMuB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOtB,GAC9B,oBAAM0B,SAAUpB,GAEZ,qBAAOqB,KAAK,SAASC,KAAK,OAAQC,MAAOxB,EAAMuB,OAG/C,qBAAOD,KAAK,SAASC,KAAK,QAAQC,MAAOxB,EAAMyB,QAE/C,sBAAQH,KAAK,UAAb,c,IAUdI,E,gLACJC,OAAA,WAAU,IAAD,EAEDC,EADcC,IAAIC,KAAM,+CACA,GAI9B,OAHA1B,QAAQC,IAAIuB,GAIR,YAAC,IAAD,KAEE,YAAC,IAAD,MAEA,YAAC,MAAD,GAAMd,WAAS,EACXC,QAAS,IADb,QAEa,EAFb,EAGIC,QAAQ,aAHZ,EAIIC,MAAOtB,EAJX,GAKI,YAAC,IAAD,CAAMuB,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIH,MAAOtB,GAC/B,mBAAKsB,MAAO,CAACc,OAAQ,YAExB,YAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOtB,GAC/B,mBAAKsB,MAAO,CAACe,MAAO,YAEvB,YAAC,IAAD,CAAMd,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGH,MAAOtB,GAC7B,YAAC,IAAD,CAAeT,MAAOA,KAChB,YAACM,EAAD,CAAkByC,QAAQ,MAAML,EAAUM,YAC1C,YAAC1C,EAAD,CAAkByC,QAAQ,SAASL,EAAUO,YAGvD,YAAC,IAAD,CAAMjB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOtB,GAC/B,mBAAKsB,MAAO,CAACe,MAAO,YAEvB,YAAC,IAAD,CAAMd,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOtB,GAC9B,mBAAKsB,MAAO,CAACe,MAAO,YAExB,YAAC,IAAD,CAAMd,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOtB,GAE/B,YAACE,EAAD,OAGH,YAAC,IAAD,CAAMqB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOtB,GAC9B,mBAAKsB,MAAO,CAACe,MAAO,YAExB,YAAC,IAAD,CAAMd,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAKH,MAAOtB,GAC/B,mBAAKsB,MAAO,CAACc,OAAQ,e,GA5CLjC,IAAMsC,WAoDzBV,YAER,IAAMW,EAAS,c","file":"component---src-pages-certificate-response-js-b9af835a130c8965edeb.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport styled, { css, keyframes } from 'styled-components'\nimport theme, { sm, md, lg, xl } from '../theme'\n\n// function useWindowSize() {\n//   const [size, setSize] = useState([0, 0])\n//   useLayoutEffect(() => {\n//     function updateSize() {\n//       setSize([window.innerWidth, window.innerHeight])\n//     }\n//     window.addEventListener('resize', updateSize)\n//     updateSize();\n//     return () => window.removeEventListener('resize', updateSize)\n//   }, [])\n//   return size\n// }\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children, scrollablePage = false, backgroundColor = theme.palette.background.lightBlue }) => {\n // const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  let layoutStyle = { \n     backgroundColor:backgroundColor,\n     minWidth:'100%',\n     height:'100vh',\n     minHeight:'100vh',\n     border: '0px solid yellow',\n     overflow:'hidden'\n  }\n  if (scrollablePage) {\n     layoutStyle = {\n          backgroundColor:backgroundColor,\n          minWidth:'100%'\n     }\n  }\n   \n  //TODO: - figure out what to do here - can't use at top level without breaking lower level styled comp \n  // const AllLayout = styled.div`\n      // minWidth:100%;\n      // height:100vh;\n      // minHeight:100vh;\n      // border: 0px solid yellow;\n      // overflow:hidden;\n  //     @media (max-width: ${sm}px) {\n  //       overflow:auto;\n  //       height:auto;\n  //     }\n  // `\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div className=\"pageContainer\">\n\n        <main>{children}</main>\n      \n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport get from 'lodash/get'\nimport Layout from '../components/layout'\nimport { Link } from \"gatsby\"\nimport { graphql } from 'gatsby' \nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport { ThemeProvider, Typography } from '@material-ui/core';\nimport theme from '../theme'\nimport styled from 'styled-components'\nimport SlideDrawer from '../components/SideDrawer'\nimport Grid from '@material-ui/core/Grid'\n\n// const StyledButton = styled(Button)`\n//   background-color: #6772e5;\n//   &:hover {\n//     background-color: #5469d4;\n//   }\n// `;\n\nconst StyledTypography = styled(Typography)`\n    margin-bottom: 3rem;\n`;\n\nconst gridStyle = {border: '0px solid red'}\n\nfunction ResponseForm() {\n    const [state, setState] = React.useState({})\n\n  const handleSubmit = async (e) => {\n      console.log(JSON.stringify(state))\n        e.preventDefault()\n        const val = await fetch('https://api.formik.com/submit/collect-score/scorecollector', {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(state),\n        })\n        console.log(val)\n  }\n\n    return (\n\n        <Grid container  \n                  spacing={0} \n                  spacing={0} \n                  justify=\"flex-start\" \n                  style={gridStyle}>\n                \n            <Grid item xs={12} sm={4}  style={gridStyle}>\n                <form onSubmit={handleSubmit}>\n                    \n                    <input type=\"hidden\" name=\"name\"  value={state.name} />\n                \n                   \n                    <input type=\"hidden\" name=\"email\" value={state.email} />\n                \n                    <button type=\"submit\">Resend </button>\n                </form>\n            </Grid>\n\n        </Grid>\n   \n    );\n  \n}\n\nclass CertificateResponse extends React.Component {\n  render() {\n    const resourcesAr = get(this, 'props.data.allCertificateResponseJson.nodes')\n    const resources = resourcesAr[0]\n    console.log(resources)\n    //console.log(resources.allResourcesJson)\n\n    return (\n        <Layout>\n          \n          <SlideDrawer />\n\n          <Grid container  \n              spacing={0} \n              spacing={0} \n              justify=\"flex-start\" \n              style={gridStyle}>\n              <Grid item xs={12} sm={12} style={gridStyle}>\n                 <div style={{height: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                 <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={8} style={gridStyle}>\n                  <ThemeProvider theme={theme}>\n                        <StyledTypography variant=\"h1\">{resources.headerText}</StyledTypography>\n                        <StyledTypography variant=\"body1\">{resources.bodyText}</StyledTypography>\n                   </ThemeProvider>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                 <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                  <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={8}  style={gridStyle}>\n\n                 <ResponseForm />\n\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                  <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={12}  style={gridStyle}>\n                  <div style={{height: '100px'}}></div>\n              </Grid>\n          </Grid>\n        </Layout>\n    )\n  }\n}\n\nexport default CertificateResponse\n\nexport const pageQuery = graphql`{\n  allCertificateResponseJson {\n    nodes {\n        headerText\n        bodyText\n    }\n  }\n}`"],"sourceRoot":""}