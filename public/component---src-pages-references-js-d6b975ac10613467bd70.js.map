{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/references.js"],"names":["Layout","children","scrollablePage","backgroundColor","theme","palette","background","lightBlue","minWidth","className","StyledTypography","styled","Typography","gridStyle","border","References","render","resources","get","this","console","log","container","spacing","justify","style","item","xs","sm","height","display","flexDirection","marginLeft","marginRight","variant","field_headertext","field_references","map","child","index","entryHtml","__html","processed","removeParagraphsTags","length","marginTop","marginBottom","dangerouslySetInnerHTML","React","Component","pageQuery"],"mappings":"2LAgGeA,IA3DA,SAAC,GAAgG,IAA9FC,EAA6F,EAA7FA,SAA6F,IAAnFC,sBAAmF,aAA3DC,uBAA2D,MAAzCC,IAAMC,QAAQC,WAAWC,UAAgB,EAGnG,OAsCV,OApBIL,GACa,CACTC,gBAAgBA,EAChBK,SAAS,QAkBf,8BAEE,YAAC,IAAD,KACA,mBAAKC,UAAU,iBAEb,wBAAOR,Q,2VC9Df,IAAMS,EAAmBC,kBAAOC,KAAV,mFAAGD,CAAH,yBAIhBE,EAAY,CAACC,OAAQ,iBAErBC,E,gLACJC,OAAA,WAAU,IAAD,EAEDC,EADcC,IAAIC,KAAM,sCACA,GAI9B,OAHAC,QAAQC,IAAIJ,GAIR,YAAC,IAAD,KAEE,YAAC,IAAD,MAEA,YAAC,MAAD,GAAMK,WAAS,EACXC,QAAS,IADb,QAEa,EAFb,EAGIC,QAAQ,aAHZ,EAIIC,MAAOZ,EAJX,GAKI,YAAC,IAAD,CAAMa,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIH,MAAOZ,GAC/B,mBAAKY,MAAO,CAACI,OAAQ,YAExB,YAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOZ,IAClC,YAAC,IAAD,CAAMa,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOZ,GAC9B,YAAC,IAAD,CAAeT,MAAOA,KACpB,mBAAKqB,MAAO,CAACK,QAAS,OAAQC,cAAc,MAAMC,WAAY,OAAOC,YAAa,SAAS,YAACvB,EAAD,CAAkBwB,QAAQ,MAAMjB,EAAUkB,mBAEpIlB,EAAUmB,iBAAkBC,KAAI,SAACC,EAAOC,GACrC,IAAMC,EAAY,CAAEC,OAAQH,EAAMI,WAIlC,MAAO,CAFOC,YAAqB,IAEnBJ,IAAWtB,EAAUmB,iBAAkBQ,OAAS,GAE3D,mBAAKnB,MAAO,CAACK,QAAS,OAAQC,cAAc,MAAMC,WAAY,OAAOC,YAAa,SAAS,mBAAKR,MAAO,CAACoB,UAAW,OAAOC,aAAc,OAAOb,YAAa,SAAWM,EAAQ,EAApF,MAAoG,mBAAKd,MAAO,CAACoB,UAAW,OAAOC,aAAc,QAASC,wBAAyBP,WAS7R,YAAC,IAAD,CAAMd,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAIH,MAAOZ,O,GAzCvBmC,IAAMC,WAgDhBlC,YAER,IAAMmC,EAAS","file":"component---src-pages-references-js-d6b975ac10613467bd70.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport styled, { css, keyframes } from 'styled-components'\nimport theme, { sm, md, lg, xl } from '../theme'\n\n// function useWindowSize() {\n//   const [size, setSize] = useState([0, 0])\n//   useLayoutEffect(() => {\n//     function updateSize() {\n//       setSize([window.innerWidth, window.innerHeight])\n//     }\n//     window.addEventListener('resize', updateSize)\n//     updateSize();\n//     return () => window.removeEventListener('resize', updateSize)\n//   }, [])\n//   return size\n// }\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children, scrollablePage = false, backgroundColor = theme.palette.background.lightBlue }) => {\n // const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  let layoutStyle = { \n     backgroundColor:backgroundColor,\n     minWidth:'100%',\n     height:'100vh',\n     minHeight:'100vh',\n     border: '0px solid yellow',\n     overflow:'hidden'\n  }\n  if (scrollablePage) {\n     layoutStyle = {\n          backgroundColor:backgroundColor,\n          minWidth:'100%'\n     }\n  }\n   \n  //TODO: - figure out what to do here - can't use at top level without breaking lower level styled comp \n  // const AllLayout = styled.div`\n      // minWidth:100%;\n      // height:100vh;\n      // minHeight:100vh;\n      // border: 0px solid yellow;\n      // overflow:hidden;\n  //     @media (max-width: ${sm}px) {\n  //       overflow:auto;\n  //       height:auto;\n  //     }\n  // `\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div className=\"pageContainer\">\n\n        <main>{children}</main>\n      \n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport get from 'lodash/get'\nimport Layout from '../components/layout'\nimport { Link } from \"gatsby\"\nimport { graphql } from 'gatsby' \nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport { ThemeProvider, Typography } from '@material-ui/core';\nimport theme from '../theme'\nimport styled from 'styled-components'\nimport SlideDrawer from '../components/SideDrawer'\nimport Grid from '@material-ui/core/Grid'\nimport { removeParagraphsTags } from '../utils/displayUtils'\n\n\n\n// const StyledButton = styled(Button)`\n//   background-color: #6772e5;\n//   &:hover {\n//     background-color: #5469d4;\n//   }\n// `;\n\nconst StyledTypography = styled(Typography)`\n    margin-bottom: 3rem;\n`;\n\nconst gridStyle = {border: '0px solid red'}\n\nclass References extends React.Component {\n  render() {\n    const resourcesAr = get(this, 'props.data.allNodeReferences.nodes')\n    const resources = resourcesAr[0]\n    console.log(resources)\n    //console.log(resources.additionalBodyText)\n\n    return (\n        <Layout>\n          \n          <SlideDrawer />\n\n          <Grid container  \n              spacing={0} \n              spacing={0} \n              justify=\"flex-start\" \n              style={gridStyle}>\n              <Grid item xs={12} sm={12} style={gridStyle}>\n                 <div style={{height: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}></Grid>\n              <Grid item xs={12} sm={8}  style={gridStyle}>\n                  <ThemeProvider theme={theme}>\n                    <div style={{display: 'flex', flexDirection:'row',marginLeft: '1rem',marginRight: '1rem'}}><StyledTypography variant=\"h1\">{resources.field_headertext}</StyledTypography></div>\n{ \n                    (resources.field_references).map((child, index) => {\n                        const entryHtml = { __html: child.processed  }\n\n                        const entry = removeParagraphsTags(\"\")\n                        \n                        return [ entry, index !== (resources.field_references).length - 1 && (\n                            // <StyledTypography variant=\"body1\">{entry}</StyledTypography>\n                             <div style={{display: 'flex', flexDirection:'row',marginLeft: '1rem',marginRight: '1rem'}}><div style={{marginTop: '1rem',marginBottom: '1rem',marginRight: '1rem'}}>{(index + 1)}.&nbsp;</div><div style={{marginTop: '1rem',marginBottom: '1rem'}} dangerouslySetInnerHTML={entryHtml} /></div>\n                          \n                          )\n                        ]\n                      })\n                    } \n\n                  </ThemeProvider>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}></Grid>\n          </Grid>\n        </Layout>\n    )\n  }\n}\n\nexport default References\n\nexport const pageQuery = graphql`{\n  allNodeReferences {\n    nodes {\n      field_headertext\n      field_references {\n        processed\n      }\n      path {\n        alias\n      }\n    }\n  }\n}`"],"sourceRoot":""}