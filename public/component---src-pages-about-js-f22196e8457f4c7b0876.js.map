{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./node_modules/@material-ui/core/esm/colors/blue.js","webpack:///./src/components/seo.js"],"names":["About","title","to","Header","siteTitle","style","background","blue","marginBottom","defaultProps","Layout","children","minWidth","height","minHeight","border","overflow","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"6FAAA,oEAceA,UARD,kBACV,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,MAAM,UACX,qCACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,mB,wHCLFC,EAAS,SAAC,GAAD,EAAGC,UAAH,OACb,4BACEC,MAAO,CACLC,WAAYC,IAAK,KACjBC,aAAa,cA6BnBL,EAAOM,aAAe,CACpBL,UAAU,I,UCMGM,IA/BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACN,OAUV,OACE,oCAEE,yBAAKN,MAAO,CAAEO,SAAS,OAAOC,OAAO,QAAQC,UAAU,QAAQC,OAAQ,mBAAmBC,SAAS,WAEjG,8BAAOL,O,qaCdA,IAhBJ,CACTM,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,KAAM,Y,mFCFR,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMjC,EAAS,EAATA,MAC9BkC,EADuC,OACvCA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFhC,MAAOA,EACPsC,cAAa,QAAUJ,EAAKE,aAAapC,MACzCiC,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASxC,GAEX,CACEyC,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASxC,GAEX,CACEuC,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfH,EAAItB,aAAe,CACjBwB,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-about-js-f22196e8457f4c7b0876.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst About = () => (\n    <Layout>\n        <SEO title=\"About\" />\n        <h1>About</h1>\n        <Link to=\"/\">Back to home</Link>\n    </Layout>\n)\n\nexport default About;\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { blue, purple } from '@material-ui/core/colors';\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: blue[600],\n      marginBottom: `1.45rem`,\n    }}\n  >\n    {/* <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div> */}\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <div style={{ minWidth:'100%',height:'100vh',minHeight:'100vh',border: '1px solid yellow',overflow:'hidden'}}>\n\n        <main>{children}</main>\n        {/* <footer>\n          Â© {new Date().getFullYear()}, \n          {` `}\n          <p>test</p>\n        </footer> */}\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","var blue = {\n  50: '#e3f2fd',\n  100: '#bbdefb',\n  200: '#90caf9',\n  300: '#64b5f6',\n  400: '#42a5f5',\n  500: '#2196f3',\n  600: '#1e88e5',\n  700: '#1976d2',\n  800: '#1565c0',\n  900: '#0d47a1',\n  A100: '#82b1ff',\n  A200: '#448aff',\n  A400: '#2979ff',\n  A700: '#2962ff'\n};\nexport default blue;","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}