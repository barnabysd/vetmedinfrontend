{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/contact.js","webpack:///./node_modules/@material-ui/core/esm/colors/blue.js","webpack:///./src/components/seo.js"],"names":["Header","siteTitle","style","background","blue","marginBottom","defaultProps","Layout","size","setSize","children","useState","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","backgroundColor","minWidth","height","minHeight","border","overflow","Contact","React","state","setState","handleChange","e","target","name","value","title","to","method","action","data-netlify","data-netlify-honeypot","onSubmit","preventDefault","data","form","fetch","headers","body","getAttribute","Object","keys","map","key","encodeURIComponent","join","then","navigate","catch","error","alert","type","hidden","onChange","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat"],"mappings":"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","file":"component---src-pages-contact-js-4c9c996d50b0e8baff48.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { blue, purple } from '@material-ui/core/colors';\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: blue[600],\n      marginBottom: `1.45rem`,\n    }}\n  >\n    {/* <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div> */}\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nfunction useWindowSize() {\n  const [size, setSize] = useState([0, 0])\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight])\n    }\n    window.addEventListener('resize', updateSize)\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n  return size\n}\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children }) => {\n  const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      \n      <div style={{ backgroundColor:\"#b7ebfa\", minWidth:'100%',height:'100vh',minHeight:'100vh',border: '1px solid yellow',overflow:'hidden'}}>\n\n        <main>{children}</main>\n        {/* <footer>\n          © {new Date().getFullYear()}, \n          {` `}\n          <p>test</p>\n        </footer> */}\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","// import React from \"react\"\nimport { Link } from \"gatsby\"\n\n// import Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n// const Contact = () => (\n//     <Layout>\n//         <SEO title=\"About\" />\n//         <h1>Contact</h1>\n//         <Link to=\"/\">Back to home</Link>\n//     </Layout>\n// )\n\n// export default Contact;\nimport React from 'react'\nimport { navigate } from 'gatsby-link'\nimport Layout from '../components/layout'\n\nfunction encode(data) {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n    .join('&')\n}\n\nexport default function Contact() {\n  const [state, setState] = React.useState({})\n\n  const handleChange = (e) => {\n    setState({ ...state, [e.target.name]: e.target.value })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.target\n    fetch('/', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: encode({\n        'form-name': form.getAttribute('name'),\n        ...state,\n      }),\n    })\n      .then(() => navigate(form.getAttribute('action')))\n      .catch((error) => alert(error))\n  }\n\n  return (\n    <Layout>\n       <SEO title=\"About\" />\n        <h1>Contact</h1>\n        <Link to=\"/\">Back to home</Link>\n      <form\n        name=\"contact\"\n        method=\"post\"\n        action=\"/thanks/\"\n        data-netlify=\"true\"\n        data-netlify-honeypot=\"bot-field\"\n        onSubmit={handleSubmit}\n      >\n        {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\n        <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n        <p hidden>\n          <label>\n            Don’t fill this out: <input name=\"bot-field\" onChange={handleChange} />\n          </label>\n        </p>\n        <p>\n          <label>\n            Your name:\n            <br />\n            <input type=\"text\" name=\"name\" onChange={handleChange} />\n          </label>\n        </p>\n        <p>\n          <label>\n            Your email:\n            <br />\n            <input type=\"email\" name=\"email\" onChange={handleChange} />\n          </label>\n        </p>\n        <p>\n          <label>\n            Message:\n            <br />\n            <textarea name=\"message\" onChange={handleChange} />\n          </label>\n        </p>\n        <p>\n          <button type=\"submit\">Send</button>\n        </p>\n      </form>\n    </Layout>\n  )\n}","var blue = {\n  50: '#e3f2fd',\n  100: '#bbdefb',\n  200: '#90caf9',\n  300: '#64b5f6',\n  400: '#42a5f5',\n  500: '#2196f3',\n  600: '#1e88e5',\n  700: '#1976d2',\n  800: '#1565c0',\n  900: '#0d47a1',\n  A100: '#82b1ff',\n  A200: '#448aff',\n  A400: '#2979ff',\n  A700: '#2962ff'\n};\nexport default blue;","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}