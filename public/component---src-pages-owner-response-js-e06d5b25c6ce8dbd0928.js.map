{"version":3,"sources":["webpack:///./src/pages/owner-response.js"],"names":["OwnerResponse","data","console","log","useCookies","cookieKeyNames","cookies","setCookie","initialState","step","ownerResponseSteps","QUESTION_POSED_BY_OWNER","useState","state","setState","resources","dogChoice","dogName","DUDLEY","resourcesAr","get","resourcesIntroAr","id","setCurrentStep","CORRECT_ANSWER","getSlideData","QUESTION_POSED","ownerResponse_CorrectAnswer","INCORRECT_ANSWER","ownerResponse_InCorrectAnswer","style","display","pageQuery"],"mappings":"4RAuEeA,UA3DO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAChBC,QAAQC,IAAIF,GADc,MAEiBG,YAAWC,KAA/CC,EAFmB,KAEVC,EAFU,KAGtBC,GAHsB,KAGP,CACfC,KAAMC,IAAmBC,0BAJH,EAOAC,mBAASJ,GAA5BK,EAPmB,KAOZC,EAPY,KAQ1BZ,QAAQC,IAAI,oBAAoBU,EAAMJ,MACtCP,QAAQC,IAAI,QAASU,GACrB,IACIE,EADEC,EAAYV,EAAO,UAAgBA,EAAO,UAAeW,IAAQC,OAEjEC,EAAcC,IAAInB,EAAM,yBACxBoB,EAAmBD,IAAInB,EAAM,oCAE7BqB,EAAK,oBAGLC,EAAiB,SAACd,GACpBP,QAAQC,IAAI,oCAAoCM,GAEhDK,EAAS,OAAD,wBAAKD,GAAL,IAAYJ,KAAMA,MAO9B,OAJII,EAAMJ,OAASC,IAAmBc,gBAClCjB,EAAU,8BAA6B,EAAK,KAGxCM,EAAMJ,MACZ,KAAKC,IAAmBC,wBACpBI,EAAYU,YAAaJ,EAAkB,uCAC7C,MACF,KAAKX,IAAmBgB,eACpBX,EAAYU,YAAaN,EAAa,2BACxC,MACA,KAAKT,IAAmBc,eAEtBT,EAAYY,IACd,MACA,KAAKjB,IAAmBkB,iBACtBb,EAAYc,IACd,MACF,QACE,MAAO,kBAIX,OADA3B,QAAQC,IAAIY,GACPA,EAGL,YAAC,IAAD,KACQF,EAAMJ,OAASC,IAAmBC,wBAA0B,YAAC,IAAD,CAAiBF,KAAMC,IAAmBC,wBAAyBW,GAAIA,EAAIQ,MAAO,CAACC,QAAS,QAASf,UAAWA,EAAWO,eAAgBA,EAAgBR,UAAWA,IAAgB,GAClPF,EAAMJ,OAASC,IAAmBgB,eAAiB,YAAC,IAAD,CAAiBjB,KAAMC,IAAmBgB,eAAgBJ,GAAIA,EAAIQ,MAAO,CAACC,QAAS,QAASf,UAAWA,EAAWO,eAAgBA,EAAiBR,UAAWA,IAAgB,GACjOF,EAAMJ,OAASC,IAAmBc,eAAiB,YAAC,IAAD,CAAiBf,KAAMC,IAAmBc,eAAgBF,GAAIA,EAAIQ,MAAO,CAACC,QAAS,QAASf,UAAWA,EAAWO,eAAgBA,EAAgBR,UAAWA,IAAgB,GAChOF,EAAMJ,OAASC,IAAmBkB,iBAAmB,YAAC,IAAD,CAAiBnB,KAAMC,IAAmBkB,iBAAkBN,GAAIA,EAAIQ,MAAO,CAACC,QAAS,QAASf,UAAWA,EAAWO,eAAgBA,EAAgBR,UAAWA,IAAgB,IAPrN,uBAcxB,IAAMiB,EAAS","file":"component---src-pages-owner-response-js-e06d5b25c6ce8dbd0928.js","sourcesContent":["import React, { useRef,useState, useEffect, createRef } from \"react\"\nimport get from \"lodash/get\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport theme, { sm, md, lg, xl } from \"../theme\"\nimport { dogName, ownerName, ownerResponseSteps, cookieKeyNames } from \"../WebsiteConstants\"\nimport { useCookies } from 'react-cookie'\nimport QuestionResPage from '../components/OwnerResPage'\nimport Layout from '../components/layout'\nimport slides, {ownerResponse_CorrectAnswer,ownerResponse_InCorrectAnswer} from \"../api/slideData\"\nimport { getSlideData } from \"../utils/displayUtils\"\n\nconst OwnerResponse = ({data}) => {\n        console.log(data)\n        const [cookies, setCookie, removeCookie] = useCookies(cookieKeyNames)\n        let initialState = { \n            step: ownerResponseSteps.QUESTION_POSED_BY_OWNER, \n        }\n      \n        const [state, setState] = useState(initialState)\n        console.log(\"=========== step \",state.step)\n        console.log(\"state\", state)\n        const dogChoice = cookies[\"dogChoice\"] ? cookies[\"dogChoice\"]: dogName.DUDLEY \n        let resources\n        const resourcesAr = get(data, 'allNodeQuestion.nodes')\n        const resourcesIntroAr = get(data, 'allNodeSectionintroduction.nodes')\n        \n        const id = \"ownerResponsePage\"\n        const style = {}\n\n        const setCurrentStep = (step) => {   \n            console.log(\"=========== setCurrentStep - step\",step)\n            // console.log(\"state\", state)\n            setState({...state, step: step})\n        }\n\n        if (state.step === ownerResponseSteps.CORRECT_ANSWER) { \n            setCookie(\"ownerResponseTaskCompleted\",true,\"/\")\n        }\n        \n        switch (state.step) {\n          case ownerResponseSteps.QUESTION_POSED_BY_OWNER:\n              resources = getSlideData(resourcesIntroAr, \"owner-response-section-introduction\")\n            break\n          case ownerResponseSteps.QUESTION_POSED:\n              resources = getSlideData(resourcesAr, \"owner-response-question\")\n            break\n            case ownerResponseSteps.CORRECT_ANSWER:\n              //TODO - dynamic\n              resources = ownerResponse_CorrectAnswer\n            break\n            case ownerResponseSteps.INCORRECT_ANSWER:\n              resources = ownerResponse_InCorrectAnswer\n            break\n          default:\n            return \"no crrent slide\"\n        }\n      \n        console.log(resources)\n        if (!resources) return \"resources not found\"\n        \n    return (\n        <Layout>\n              { state.step === ownerResponseSteps.QUESTION_POSED_BY_OWNER ? <QuestionResPage step={ownerResponseSteps.QUESTION_POSED_BY_OWNER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.QUESTION_POSED ? <QuestionResPage step={ownerResponseSteps.QUESTION_POSED} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep } resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.CORRECT_ANSWER ? <QuestionResPage step={ownerResponseSteps.CORRECT_ANSWER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n              { state.step === ownerResponseSteps.INCORRECT_ANSWER ? <QuestionResPage step={ownerResponseSteps.INCORRECT_ANSWER} id={id} style={{display: 'flex'}} dogChoice={dogChoice} setCurrentStep={setCurrentStep} resources={resources} /> : ''}\n        </Layout>\n    )\n}\n\nexport default OwnerResponse\n\nexport const pageQuery = graphql`\n  {\n    allNodeQuestion {\n      nodes {\n        field_accessibilityvideotext\n        field_additionalbodytext {\n          processed\n        }\n        field_animationvideoname\n        field_backlink {\n          title\n          uri\n        }\n        field_buttonlinks {\n          title\n          uri\n        }\n        field_continuelink {\n          title\n          uri\n        }\n        field_dogchoice\n        field_instructionstext {\n          processed\n        }\n        field_optioniscorrect1\n        field_optionlink1 {\n          title\n          uri\n        }\n        field_optionsbodytext1 {\n          processed\n        }\n        field_optionsbodytext2 {\n          processed\n        }\n        field_optionsbodytext3 {\n          processed\n        }\n        field_optionsheader1\n        field_progresspercent\n        field_questiontext {\n          processed\n        }\n        path {\n          alias\n        }\n        drupal_id\n        changed(fromNow: false)\n      }\n    }\n    allNodeSectionintroduction {\n    nodes {\n      field_headertext\n      path {\n        alias\n      }\n    }\n  }\n\n  }\n  `\n\n"],"sourceRoot":""}