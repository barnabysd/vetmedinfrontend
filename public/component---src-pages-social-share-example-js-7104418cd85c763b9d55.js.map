{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.fixed.js","webpack:///./src/pages/socialShareExample.js","webpack:///./src/components/layout.js"],"names":["createHTML","this","SocialShareExample","post","frontmatter","image","placeholderImage","title","summary","date","html","shareUrl","pathname","url","subject","body","className","size","round","source","windowWidth","windowHeight","to","Layout","children","theme","palette","background","lightBlue"],"mappings":"8FAEA,EAAQ,OAAR,CAA0B,SAAS,SAAUA,GAC3C,OAAO,WACL,OAAOA,EAAWC,KAAM,KAAM,GAAI,S,8NCoCvB,SAASC,IAEtB,IAYMC,EAAO,CACTC,YACA,CACIC,MAdO,OAcUC,kBAErBC,MAAM,OACNC,QAAQ,gBACRC,KAAK,aACLC,KAAM,qBAEJC,EAtBW,CAACA,SAAS,wBAsBDC,SACpBL,EAAQJ,EAAKC,YAAYG,MAI/B,OACE,YAAC,IAAD,KAKJ,YAAC,IAAD,CACcM,IAAKF,EACLG,QAASP,EACTQ,KAAK,OACLC,UAAU,UACV,YAAC,IAAD,CACEC,KAAM,GACNC,OAAO,KAEvB,YAAC,IAAD,CACAL,IAjBa,uBAkBGL,QAnBE,YAoBFD,MAAOA,EACPY,OAtBC,uBAuBDC,YAAa,IACbC,aAAc,IACdL,UAAU,UACV,YAAC,IAAD,CACEC,KAAM,GACNC,OAAO,KAEX,YAAC,IAAD,CAAMI,GAAG,KAAT,mB,iICPCC,IApDA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGN,OAU4BC,IAAMC,QAAQC,WAAWC,UAqB/D,OACE,8BAEE,YAAC,IAAD,KACA,mBAAKZ,UAAU,iBAEb,wBAAOQ,Q","file":"component---src-pages-social-share-example-js-7104418cd85c763b9d55.js","sourcesContent":["'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport Img from 'gatsby-image'\nimport Link from 'gatsby-link'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Layout from '../components/layout'\n\nimport {\n  EmailShareButton,\n  LinkedinShareButton,\n  ShareCounts,\n  LinkedinShareCount,\n  EmailIcon,\n  LinkedinIcon\n} from 'react-share';\n\n// const {\n//   FacebookShareButton,\n//   GooglePlusShareButton,\n//   LinkedinShareButton,\n//   TwitterShareButton,\n//   EmailShareButton,\n// } = ShareButtons;\n// const {\n//   FacebookShareCount,\n//   GooglePlusShareCount,\n//   LinkedinShareCount,\n \n// } = ShareCounts;\n\n// const FacebookIcon = generateShareIcon('facebook');\n// const TwitterIcon = generateShareIcon('twitter');\n// const GooglePlusIcon = generateShareIcon('google');\n// const LinkedinIcon = generateShareIcon('linkedin');\n\n// const EmailIcon = generateShareIcon('email');\n\n// export default function Template({\n//   data, location // this prop will be injected by the GraphQL query we'll write in a bit\n// }) {\nexport default function SocialShareExample() {\n  //const { markdownRemark: post } = data;\n  const location = {shareUrl:\"http://www.bbc.co.uk\"}\n  const imageData = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"gatsby-astronaut.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n  const post = {\n      frontmatter:\n      {\n          image: imageData.placeholderImage\n      },\n      title:\"test\",\n      summary:\"tbfgffdfggdfg\",\n      date:\"20-10-2020\",\n      html: \"<p>Helloooooo</p>\"\n }\n  const shareUrl = location.pathname\n  const title = post.frontmatter.title\n  const source = \"http://www.bbc.co.uk\"\n  const summary = \"ddfgdfgdg\"\n  const url =\"http://www.bbc.co.uk\"\n  return (\n    <Layout>\n{/* <Helmet title={`Vetmedin | Some stuff - ${post.frontmatter.title}`} />\n        <Img sizes={post.frontmatter.image.childImageSharp.sizes} />\n         */}\n\n<EmailShareButton\n              url={shareUrl}\n              subject={title}\n              body=\"body\"\n              className=\"button\">\n              <EmailIcon\n                size={32}\n                round={false} />\n              </EmailShareButton>\n<LinkedinShareButton\nurl={url}\n                summary={summary}\n                title={title}\n                source={source}\n                windowWidth={750}\n                windowHeight={600}\n                className=\"button\">\n                <LinkedinIcon\n                  size={32}\n                  round={false} />\n              </LinkedinShareButton>\n              <Link to=\"/\">Back to home</Link>\n \n{/*         \n           <ul className=\"social-share\">\n            <li>\n                <FacebookShareButton\n                url={shareUrl}\n                quote={title}\n                className=\"button\" \n                >\n                <FacebookIcon\n                  size={32}\n                  round={false} />\n              </FacebookShareButton>\n\n              <FacebookShareCount\n                url={shareUrl}\n                className=\"count\">\n                {count => count}\n              </FacebookShareCount>\n            </li>\n            <li>\n                <TwitterShareButton\n                url={shareUrl}\n                title={title}\n                className=\"button\">\n                <TwitterIcon\n                  size={32}\n                  round={false} />\n              </TwitterShareButton>\n            </li>\n            \n            <li>\n                <LinkedinShareButton\n                url={shareUrl}\n                title={title}\n                windowWidth={750}\n                windowHeight={600}\n                className=\"button\">\n                <LinkedinIcon\n                  size={32}\n                  round={false} />\n              </LinkedinShareButton>\n\n              <LinkedinShareCount\n                url={shareUrl}\n                className=\"count\">\n                {count => count}\n              </LinkedinShareCount>\n            </li>\n            <li>\n              <EmailShareButton\n              url={shareUrl}\n              subject={title}\n              body=\"body\"\n              className=\"button\">\n              <EmailIcon\n                size={32}\n                round={false} />\n              </EmailShareButton>\n            \n            </li>\n          </ul> */}\n          {/* <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: post.html }}\n          />\n      */}\n{/*      \n      <Helmet\n        bodyAttributes={{\n          class: 'noBgImg'\n        }}\n      />\n   */}\n    </Layout>\n  );\n}\n// export const pageQuery = graphql`\n//   query BlogPostByPath($path: String!) {\n//     markdownRemark(frontmatter: { path: { eq: $path } }) {\n//       html\n//       frontmatter {\n//         date(formatString: \"DD MMMM YYYY\", locale:\"fr\")\n//         path\n//         title\n//         image {\n//           childImageSharp {\n//             resize(width: 1500, height: 1500) {\n//               src\n//             }\n//             sizes(maxWidth: 786) {\n//               ...GatsbyImageSharpSizes\n//             }\n//           }\n//         }    \n    \n        \n//       }\n//     }\n//   }\n// `;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport styled, { css, keyframes } from 'styled-components'\nimport theme, { sm, md, lg, xl } from '../theme'\n\n// function useWindowSize() {\n//   const [size, setSize] = useState([0, 0])\n//   useLayoutEffect(() => {\n//     function updateSize() {\n//       setSize([window.innerWidth, window.innerHeight])\n//     }\n//     window.addEventListener('resize', updateSize)\n//     updateSize();\n//     return () => window.removeEventListener('resize', updateSize)\n//   }, [])\n//   return size\n// }\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children }) => {\n // const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const layoutStyle = { backgroundColor:theme.palette.background.lightBlue,\n     minWidth:'100%',\n     height:'100vh',\n     minHeight:'100vh',\n     border: '0px solid yellow',\n     overflow:'hidden'\n  }\n   \n  //TODO: - figure out what to do here - can't use at top level without breaking lower level styled comp \n  // const AllLayout = styled.div`\n      // minWidth:100%;\n      // height:100vh;\n      // minHeight:100vh;\n      // border: 0px solid yellow;\n      // overflow:hidden;\n  //     @media (max-width: ${sm}px) {\n  //       overflow:auto;\n  //       height:auto;\n  //     }\n  // `\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div className=\"pageContainer\">\n\n        <main>{children}</main>\n      \n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}