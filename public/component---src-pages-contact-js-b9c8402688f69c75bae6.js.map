{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/contact.js","webpack:///./src/components/layoutScrollable.js"],"names":["Layout","size","setSize","children","useState","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","layoutStyle","backgroundColor","theme","palette","background","lightBlue","minWidth","height","minHeight","border","overflow","style","StyledTypography","styled","Typography","gridStyle","PhoneNumber","textLabel","width","marginBottom","variant","EmailAddress","Contact","render","resources","get","this","console","log","container","spacing","justify","item","xs","sm","headerText","bodyText","contactBoxHeader1","contactBoxBody1","contactPhoneNumber1","contactEmail1","contactBoxHeader2","contactBoxBody2","contactPhoneNumber2","contactEmail2","React","Component","pageQuery","LayoutScrollable","layoutScrollableStyle"],"mappings":"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","file":"component---src-pages-contact-js-b9c8402688f69c75bae6.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport theme from \"../theme\"\n\nfunction useWindowSize() {\n  const [size, setSize] = useState([0, 0])\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight])\n    }\n    window.addEventListener('resize', updateSize)\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n  return size\n}\n\n// function ShowWindowDimensions(props) {\n//   const [width, height] = useWindowSize();\n//   return <span>Window size: {width} x {height}</span>;\n// }\n\nconst Layout = ({ children }) => {\n  const [width, height] = useWindowSize();\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const layoutStyle = { backgroundColor:theme.palette.background.lightBlue, minWidth:'100%',height:'100vh',minHeight:'100vh',border: '0px solid yellow',overflow:'hidden'}\n\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div style={layoutStyle}>\n\n        <main>{children}</main>\n        {/* <footer>\n          Â© {new Date().getFullYear()}, \n          {` `}\n          <p>test</p>\n        </footer> */}\n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport get from 'lodash/get'\nimport LayoutScrollable from '../components/layoutScrollable'\nimport Layout from '../components/layout'\nimport { Link } from \"gatsby\"\nimport { graphql } from 'gatsby' \nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport { ThemeProvider, Typography } from '@material-ui/core';\nimport theme from '../theme'\nimport styled from 'styled-components'\nimport SlideDrawer from '../components/SideDrawer'\nimport Grid from '@material-ui/core/Grid'\n\n// const StyledButton = styled(Button)`\n//   background-color: #6772e5;\n//   &:hover {\n//     background-color: #5469d4;\n//   }\n// `;\n\nconst StyledTypography = styled(Typography)`\n    margin-bottom: 3rem;\n`;\n\nconst gridStyle = {border: '0px solid red'}\n\nconst PhoneNumber = ({textLabel}) => {\n    return (<div style={{width: '100%',marginBottom:'2rem' }}><Typography variant=\"caption\">{textLabel}</Typography></div>)\n}\nconst EmailAddress = ({textLabel}) => {\n    return (<div style={{width: '100%',marginBottom:'2rem' }}><Typography variant=\"caption\">{textLabel}</Typography></div>)\n}\n\nclass Contact extends React.Component {\n  render() {\n    const resourcesAr = get(this, 'props.data.allContactJson.nodes')\n    const resources = resourcesAr[0]\n    console.log(resources)\n    //console.log(resources.allResourcesJson)\n\n    return (\n        <Layout>\n          \n          <SlideDrawer />\n\n          <Grid container  \n              spacing={0} \n              spacing={0} \n              justify=\"flex-start\" \n              style={gridStyle}>\n              <Grid item xs={12} sm={12} style={gridStyle}>\n                 <div style={{height: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                 <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={8} style={gridStyle}>\n                  <ThemeProvider theme={theme}>\n                        <StyledTypography variant=\"h1\">{resources.headerText}</StyledTypography>\n                        <StyledTypography variant=\"body1\">{resources.bodyText}</StyledTypography> \n                   </ThemeProvider>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                 <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                  <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={8}  style={gridStyle}>\n                  <ThemeProvider theme={theme}>\n                      <div>\n                        <StyledTypography variant=\"h1\">{resources.contactBoxHeader1}</StyledTypography>\n                        <StyledTypography variant=\"body1\">{resources.contactBoxBody1}</StyledTypography>\n                        <PhoneNumber textLabel={resources.contactPhoneNumber1} />\n                        <EmailAddress textLabel={resources.contactEmail1} />\n                      </div>\n                      <div>\n                        <StyledTypography variant=\"h1\">{resources.contactBoxHeader2}</StyledTypography>\n                        <StyledTypography variant=\"body1\">{resources.contactBoxBody2}</StyledTypography>\n                        <PhoneNumber textLabel={resources.contactPhoneNumber2} />\n                        <EmailAddress textLabel={resources.contactEmail2} />\n                      </div>\n                   </ThemeProvider>\n              </Grid>\n              <Grid item xs={12} sm={2}  style={gridStyle}>\n                  <div style={{width: '100px'}}></div>\n              </Grid>\n              <Grid item xs={12} sm={12}  style={gridStyle}>\n                  <div style={{height: '100px'}}></div>\n              </Grid>\n          </Grid>\n        </Layout>\n    )\n  }\n}\n\nexport default Contact\n\nexport const pageQuery = graphql`{\n    allContactJson {\n        nodes {\n        bodyText\n        contactAdditionalPhoneNumber1\n        contactAdditionalPhoneNumber2\n        contactBoxBody1\n        contactBoxBody2\n        contactBoxHeader1\n        contactBoxHeader2\n        contactEmail1\n        contactEmail2\n        contactPhoneNumber1\n        contactPhoneNumber2\n        headerText\n        additionalBodyText\n        }\n    }\n}`","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n//import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport React, { useLayoutEffect, useState } from 'react'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport theme from \"../theme\"\n\nconst LayoutScrollable = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitle2Query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const layoutScrollableStyle = { backgroundColor:theme.palette.background.lightBlue, minWidth:'100%' }\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <CookiesProvider>\n      <div style={layoutScrollableStyle}>\n        <main>{children}</main>\n      </div>\n      </CookiesProvider>\n    </>\n  )\n}\n\nLayoutScrollable.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default LayoutScrollable\n"],"sourceRoot":""}